# This is a basic workflow to help you get started with Actions
name: CI/CD Pipeline

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# All the environment variables are defined here
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  HELM_PATH: './helm/modernpets/'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Build"
  build:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.build_number.outputs.build_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Getting a short sha and the timestamp
      - name: Setting Github Short SHA & TIMESTAMP
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "TIMESTAMP=`date -u +%Y%m%d%H%M%S`" >> $GITHUB_ENV

      # Action for get e build number of the pipeline
      - name: Generate build number
        id: build_number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}

      # Action used to log in into Dockerhub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Building the image and pushing both as a latest image
      - name: Build Docker Images
        env:
          JPETSTOREWEB: ${{env.DOCKER_USERNAME}}/jpetstoreweb
          JPETSTOREDB: ${{env.DOCKER_USERNAME}}/jpetstoredb
          BUILD_TAG: ${{env.BUILD_NUMBER}}-${{github.ref_name}}-${{env.SHORT_SHA}}-${{env.TIMESTAMP}}
        run: |
          echo "Building docker images..."
          docker build -t ${{env.JPETSTOREWEB}}:${{env.BUILD_TAG}} -t ${{env.JPETSTOREWEB}}:latest ./jpetstore
          docker build -t ${{env.JPETSTOREDB}}:${{env.BUILD_TAG}} -t ${{env.JPETSTOREDB}}:latest .
          docker push ${{env.JPETSTOREWEB}}:${{env.BUILD_TAG}}
          docker push ${{env.JPETSTOREWEB}}:latest
          docker push ${{env.JPETSTOREDB}}:${{env.BUILD_TAG}}
          docker push ${{env.JPETSTOREDB}}:latest

  # Job used for testing new actions
  test:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Getting the build number for previous job
      - name: Getting build number from above job
        run: echo ${{needs.build.outputs.build_number}}

      # Login into Azure
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Set the kubectl environment
      - name: Setting up Kubectl usage
        uses: azure/setup-kubectl@v2.0

      # Set the target AKS cluster
      - name: Setting up Azure AKS context
        uses: azure/aks-set-context@v2.0
        with:
          resource-group: ${{secrets.AZURE_RESOURCE_GROUP}}
          cluster-name: ${{secrets.AZURE_CLUSTER_NAME}}

      - name: Setting up helm environment
        uses: azure/k8s-bake@v2
        id: bake
        with:
          renderEngine: 'helm'
          helmChart: ${{env.HELM_PATH}}
          # overrideFiles: './aks-helloworld/values-override.yaml'
          # overrides: |
          #   replicas:2
          helm-version: 'latest'

      - name: Testing helm
        run: |
          helm --version
